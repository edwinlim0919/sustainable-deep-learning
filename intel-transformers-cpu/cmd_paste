ray start --head

serve build int4_llama2_model:llama2_endpoint -o ../configs/ray_llama2.yaml
serve run ../configs/ray_llama2.yaml
python3 int4_llama2_client.py

ray stop




# Flow from https://docs.ray.io/en/latest/serve/production-guide/index.html
serve build int4_llama2_model:llama2_endpoint -o serve_config.yaml
ray start --head
serve deploy serve_config.yaml
python3 int4_llama2_client.py




# Single-node cluster
serve build int4_llama2_model:llama2_endpoint -o serve_config.yaml
ray start --head --port=6379
serve deploy serve_config.yaml
python3 int4_llama2_client.py


# Ray is hot garbage for CPU inference
python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path c6420_1_1000_10_05_3_5.txt --head-node-ip http://130.127.133.221:8000/ --num-requests-sample 1000 --requests-per-rate 10 --start-rate 0.5 --end-rate 3 --increase-rate 5

python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path c6420_1_1000_20_05_10_2.txt --num-requests-sample 1000 --requests-per-rate 20 --start-rate 0.5 --end-rate 10 --increase-rate 2

python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path c6420_1_1000_25_05_10_2.txt --num-requests-sample 1000 --requests-per-rate 25 --start-rate 0.5 --end-rate 10 --increase-rate 2

python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path prompt_testing.txt --num-requests-sample 1000 --requests-per-rate 1 --start-rate 0.5 --end-rate 10 --increase-rate 2 --prompt "Based of the following text message, create an appealing email subject line to send my application.\n\nYea so me and my colleague are prioritizing hiring for 8 month terms starting in May for Project coordinator roles (mostly project finance, data analysis, & admin based) within the IT sector, however length might change depending on competitiveness & just any HR developments."

python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path c6420_1_1000_50_05_10_2.txt --num-requests-sample 1000 --requests-per-rate 50 --start-rate 0.5 --end-rate 10 --increase-rate 2
python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split_top100.json --output-file-path prompt_testing.txt --num-requests-sample 0 --requests-per-rate 50 --start-rate 0.5 --end-rate 10 --increase-rate 2

python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path time_c6420_1_10000_3600_1_10_2 --num-requests-sample 10000 --seconds-per-rate 3600 --start-rate 1 --end-rate 10 --increase-rate 2

python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path time_c6420_1_10000_3600_4_10_2 --num-requests-sample 10000 --seconds-per-rate 3600 --start-rate 4 --end-rate 10 --increase-rate 2

python3 int4_llama2_local.py --dataset-path ShareGPT_V3_unfiltered_cleaned_split.json --output-file-path time_c6420_1_10000_3600_02_2_12 --num-requests-sample 10000 --seconds-per-rate 3600 --start-rate 0.2 --end-rate 2 --increase-rate 1.2


ps aux | grep int4_llama2_local.py | grep -v grep | awk '{print $2}' | xargs kill






# PCM power/perf monitoring
sudo modprobe msr
sudo pcm
sudo pcm-memory
# NOTE: pcm-accel does not work on c6420, likely only 4th generation Sapphire Rapids
# sudo pcm-accel
sudo pcm-latency
# NOTE: don't think PCIe info is particularly important when running inference natively on CPU, since the only thing it may access is SSD
sudo pcm-pcie
sudo pcm-iio
sudo pcm-numa
sudo pcm-power
# NOTE: I don't know what transactional synchronization extensions are for, probably not necessary to monitor for our use cases
# sudo pcm-tsx
# NOTE: I think pcm-core info might be included in just normal pcm
# sudo pcm-core
# NOTE: pmu-query doesn't work on c6420 nodes, maybe on 4th generation Sapphire Rapids
# sudo pmu-query
# NOTE: have to specify registers for pcm-raw, don't think this one is necessary
# pcm-raw
# NOTE: pcm-bw-histogram seems useful, but doesn't seem to work on c6420 nodes
# sudo pcm-bw-histogram

sudo python3 test_local_pcm_monitoring.py --log-file-path testing_local_pcm_mon --logging-interval 10 --cmd-runtime 5 --pcm-cmds "pcm pcm-memory pcm-latency pcm-numa pcm-power" --sleep-time 120
